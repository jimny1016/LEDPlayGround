using HidSharp;
using System;
using System.Linq;
using System.Threading;

namespace LEDPlayground.Countrollers.Hyte.Keeb
{
    public class KeebTestController
    {
        static HidStream _stream;
        public KeebTestController()
        {

            var deviceList = DeviceList.Local;
            //var dd = deviceList.GetHidDevices(0x3402, 0x0300);
            var deviceInfoWrite = deviceList.GetHidDevices(0x3402, 0x0300).Where(x => x.GetMaxFeatureReportLength() == 9).FirstOrDefault();

            if (deviceInfoWrite != null)
            {
                Console.WriteLine($"找到裝置: {deviceInfoWrite}");

                try
                {
                    deviceInfoWrite.TryOpen(out _stream);

                    SwitchScrollWhellToSoftWare();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"無法打開裝置: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("找不到裝置。");
            }
        }

        public static void SetDefault()
        {
            byte[] command0 = new byte[] { 0x00, 0x04, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            _stream.SetFeature(command0);
            byte[] command1 = new byte[] { 0x00, 0x29, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x0a, 0x3a, 0x00, 0x00, 0x01, 0x3b, 0x00, 0x00, 0x01, 0x3c, 0x00, 0x00, 0x01, 0x3d, 0x00, 0x00, 0x01, 0x3e, 0x00, 0x00, 0x01, 0x3f, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x41, 0x00, 0x00, 0x01, 0x42, 0x00, 0x00, 0x01, 0x43, 0x00, 0x00, 0x01, 0x44, 0x00, 0x00, 0x01, 0x45, 0x00, 0x00, 0x01, 0x46, 0x00, 0x00, 0x01, 0x47, 0x00, 0x00, 0x01 };
            _stream.Write(command1);
            //Thread.Sleep(10);
            byte[] command2 = new byte[] { 0x00, 0x48, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x01, 0x1e, 0x00, 0x00, 0x01, 0x1f, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x01, 0x22, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00, 0x01, 0x24, 0x00, 0x00, 0x01, 0x25, 0x00, 0x00, 0x01, 0x26, 0x00, 0x00, 0x01, 0x27, 0x00, 0x00, 0x01 };
            _stream.Write(command2);
            //Thread.Sleep(10);
            byte[] command3 = new byte[] { 0x00, 0x2d, 0x00, 0x00, 0x01, 0x2e, 0x00, 0x00, 0x01, 0x2a, 0x00, 0x00, 0x01, 0x49, 0x00, 0x00, 0x01, 0x4a, 0x00, 0x00, 0x01, 0x4b, 0x00, 0x00, 0x01, 0x53, 0x00, 0x00, 0x01, 0x54, 0x00, 0x00, 0x01, 0x55, 0x00, 0x00, 0x01, 0x56, 0x00, 0x00, 0x01, 0x2b, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00, 0x01, 0x1a, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x17, 0x00, 0x00, 0x01 };
            _stream.Write(command3);
            //Thread.Sleep(10);
            byte[] command4 = new byte[] { 0x00, 0x1c, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x01, 0x13, 0x00, 0x00, 0x01, 0x2f, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x01, 0x4c, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00, 0x01, 0x4e, 0x00, 0x00, 0x01, 0x5f, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x57, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01 };
            _stream.Write(command4);
            //Thread.Sleep(10);
            byte[] command5 = new byte[] { 0x00, 0x04, 0x00, 0x00, 0x01, 0x16, 0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x01, 0x09, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x01, 0x0b, 0x00, 0x00, 0x01, 0x0d, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x01, 0x0f, 0x00, 0x00, 0x01, 0x33, 0x00, 0x00, 0x01, 0x34, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 0x01, 0x28, 0x00, 0x00, 0x01, 0xb7, 0x00, 0x00, 0x03, 0xb6, 0x00, 0x00, 0x03, 0xcd, 0x00, 0x00, 0x03 };
            _stream.Write(command5);
            //Thread.Sleep(10);
            byte[] command6 = new byte[] { 0x00, 0x5c, 0x00, 0x00, 0x01, 0x5d, 0x00, 0x00, 0x01, 0x5e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x01, 0x1d, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x01, 0x19, 0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x01, 0x11, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x01, 0x37, 0x00, 0x00, 0x01, 0x38, 0x00, 0x00, 0x01 };
            _stream.Write(command6);
            //Thread.Sleep(10);
            byte[] command7 = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x00, 0x00, 0x01, 0xb5, 0x00, 0x00, 0x03, 0x52, 0x00, 0x00, 0x01, 0xe2, 0x00, 0x00, 0x03, 0x59, 0x00, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x01, 0x5b, 0x00, 0x00, 0x01, 0x58, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x01, 0xe3, 0x00, 0x00, 0x01, 0xe2, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x01 };
            _stream.Write(command7);
            //Thread.Sleep(10);
            byte[] command8 = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x01, 0x15, 0x01, 0x00, 0xf0, 0x65, 0x00, 0x00, 0x01, 0xe4, 0x00, 0x00, 0x01, 0x50, 0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x01, 0x4f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x01, 0x63, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            _stream.Write(command8);
            //Thread.Sleep(10);
            Thread.Sleep(50);


            byte[] commandRead = new byte[] { 0x00, 0x84, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            //stream.Write(commandRead);
            Thread.Sleep(50);
            _stream.SetFeature(commandRead);

            Thread.Sleep(50);
            var ddd = _stream.Read();
            var ddd1 = _stream.Read();
            var ddd2 = _stream.Read();
            var ddd3 = _stream.Read();
        }

        public static void SetAMacroKey() 
        {
            byte[] command0 = new byte[] { 0x00, 0x04, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            _stream.SetFeature(command0);
            byte[] command1 = new byte[65];
            command1[0] = 0x00;
            command1[1] = 0x02;
            command1[2] = 0x00;
            command1[3] = 0x01;
            command1[4] = 0x1E;
            command1[5] = 0x81;
            command1[6] = 0x1E;
            command1[7] = 0x01;
            command1[8] = 0x1F;
            command1[9] = 0x81;
            command1[10] = 0x1F;
            command1[11] = 0x01;
            command1[12] = 0x20;
            command1[13] = 0x81;
            command1[14] = 0x20;
            _stream.Write(command1);
            byte[] command2 = new byte[65];
            _stream.Write(command2);
            byte[] command3 = new byte[65];
            _stream.Write(command3);
            byte[] command4 = new byte[65];
            _stream.Write(command4);
        }

        public static void SwitchScrollWhellToSoftWare()
        {
            byte[] commandRead = new byte[] { 0x00, 0x12, 0xA0, 0x6A, 0x11, 0x00, 0x00, 0x00, 0x00 };
            _stream.SetFeature(commandRead);
        }

        public static void SwitchScrollWhellToFramWare()
        {
            byte[] commandRead = new byte[] { 0x00, 0x12, 0xA0, 0x6A, 0x10, 0x00, 0x00, 0x00, 0x00 };
            _stream.SetFeature(commandRead);
        }
    }
}